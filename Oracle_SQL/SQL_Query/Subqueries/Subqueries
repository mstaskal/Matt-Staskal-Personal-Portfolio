--Examples of using subqueries to retreive and analyze data--

--Using single row subquery to list title and price of all books with retail price lower than the average book price--
SELECT title, retail
FROM books
WHERE retail < (SELECT AVG(retail)
                FROM books);

--Using inline view to list books that cost less than the average cost of other books in the same category--
SELECT b.title, b.cost, a.category, a.cataverage
    FROM books b, (SELECT category, AVG(cost) cataverage
                    FROM books
                    GROUP by category) a
    WHERE b.category = a.category
    AND b.cost < a.cataverage;

--Using group filtering to list which orders had a higher total amount due than order 1008--
SELECT order#, SUM(quantity*paideach) "Total Amount Due"
FROM orderitems
GROUP BY order#
HAVING SUM(quantity*paideach) > (SELECT SUM(quantity*paideach)
                            FROM orderitems
                            WHERE order# = 1008);

--Using Common Table Expression to determine the 5 highest selling books and displaying profit margin for those books--
WITH purchase_totals AS (
  SELECT isbn, title, SUM(quantity) AS total_purchases
  FROM books
    JOIN orderitems USING (isbn)
  GROUP BY isbn, title
),
book_profitability AS (
  SELECT isbn, title, ROUND(((retail-cost)/cost)*100,2)||'%' AS book_profit
  FROM books
)
SELECT pt.isbn, pt.title, pt.total_purchases, bp.book_profit
  FROM purchase_totals pt
    JOIN book_profitability bp
    ON pt.isbn = bp.isbn
ORDER BY 3 DESC
FETCH FIRST 5 ROWS ONLY;

--Using Common Table Expression to project the cost of accepting credit card payments vs. the expected uncollectible loss from mail-in payments based on 4% loss for higher-than-average purchases--
WITH projections AS (
SELECT order#, SUM(quantity*paideach) "Total Due for Order",
  ROUND((SUM(quantity*paideach))*.015,2) "CC Processing Fee",
  SUM(quantity*paideach) - ROUND((SUM(quantity*paideach))*.015,2) "Final Total with CC",
  (SELECT ROUND(AVG(SUM(quantity*paideach)),2)
    FROM orderitems
    GROUP BY order#) "Average Total for All Orders",
    CASE
      WHEN SUM(quantity*paideach) > (SELECT ROUND(AVG(SUM(quantity*paideach)),2)
                                        FROM orderitems
                                        GROUP BY order#)
                                        THEN 
                                        ROUND(SUM(quantity*paideach) * .04,2)
      ELSE 0.00
    END "Uncollectible Loss"
FROM orderitems
GROUP BY order#
)
SELECT SUM("CC Processing Fee"), SUM("Uncollectible Loss")
FROM projections;

--List which authors wrote the books most frequently purchased by customers--
SELECT authorid, lname, fname, SUM(quantity) "Total Purchases"
FROM orderitems
    JOIN books USING (isbn)
    JOIN bookauthor USING (isbn)
    JOIN author USING (authorid)
GROUP BY authorid, lname, fname
HAVING SUM(quantity) = (SELECT MAX(SUM(quantity))
                        FROM orderitems
                            JOIN books USING(isbn)
                            JOIN bookauthor USING (isbn)
                            JOIN author USING (authorid)
                        GROUP BY authorid);

--List titles of all books in the same category as books previously purchased by customer 1007, excluding books previously purchased--
SELECT title, category
    FROM books
    WHERE category IN (SELECT category
                            FROM books
                                JOIN orderitems USING (isbn)
                                JOIN orders USING (order#)
                                JOIN customers USING (customer#)
                            WHERE customer# = 1007)
    AND isbn NOT IN (SELECT isbn
                            FROM books
                                JOIN orderitems USING (isbn)
                                JOIN orders USING (order#)
                                JOIN customers USING (customer#)
                            WHERE customer# = 1007);

--Determining the shipping city and state for the order that had the longest shipping delay, excluding NULL values from shipping column--
SELECT order#, shipcity, shipstate, ROUND(NVL(shipdate,SYSDATE)-orderdate,0) "Shipping Delay"
FROM orders
WHERE NVL(shipdate,SYSDATE)-orderdate = (SELECT MAX(NVL(shipdate,SYSDATE)-orderdate)
                            FROM orders);

--List which customers purchased the lowest priced book--
SELECT customer#, lastname, firstname
FROM customers
    JOIN orders USING (customer#)
    JOIN orderitems USING (order#)
    JOIN books USING (isbn)
WHERE retail = (SELECT MIN(retail)
                FROM books);

--Determining the number of unique customers who have placed an order for books by James Austin--
SELECT COUNT (DISTINCT o.customer#) "No of Customers ordering books by James Austin"
FROM orders o
    JOIN orderitems oi ON o.order# = oi.order#
    JOIN books b ON oi.isbn = b.isbn
WHERE b.isbn IN (SELECT ba.isbn
                FROM author a
                JOIN bookauthor ba ON a.authorid = ba.authorid
                WHERE a.authorid = 'A100');


